// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer_support.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomerSupportCase = `-- name: CreateCustomerSupportCase :one
INSERT INTO customer_support (
    CS_ID,
    USER_ID,
    ORDER_ID,
    SUBJECT,
    MESSAGE,
    STATUS
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING cs_id, user_id, order_id, subject, message, status, created_at, updated_at
`

type CreateCustomerSupportCaseParams struct {
	CsID    uuid.UUID   `json:"cs_id"`
	UserID  uuid.UUID   `json:"user_id"`
	OrderID uuid.UUID   `json:"order_id"`
	Subject pgtype.Text `json:"subject"`
	Message pgtype.Text `json:"message"`
	Status  string      `json:"status"`
}

func (q *Queries) CreateCustomerSupportCase(ctx context.Context, arg CreateCustomerSupportCaseParams) (CustomerSupport, error) {
	row := q.db.QueryRow(ctx, createCustomerSupportCase,
		arg.CsID,
		arg.UserID,
		arg.OrderID,
		arg.Subject,
		arg.Message,
		arg.Status,
	)
	var i CustomerSupport
	err := row.Scan(
		&i.CsID,
		&i.UserID,
		&i.OrderID,
		&i.Subject,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerSupportCaseById = `-- name: GetCustomerSupportCaseById :one
SELECT 
    cs_id, user_id, order_id, subject, message, status, created_at, updated_at 
FROM customer_support 
WHERE CS_ID = $1
`

func (q *Queries) GetCustomerSupportCaseById(ctx context.Context, csID uuid.UUID) (CustomerSupport, error) {
	row := q.db.QueryRow(ctx, getCustomerSupportCaseById, csID)
	var i CustomerSupport
	err := row.Scan(
		&i.CsID,
		&i.UserID,
		&i.OrderID,
		&i.Subject,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerSupportCaseList = `-- name: GetCustomerSupportCaseList :many
SELECT 
    cs_id, user_id, order_id, subject, message, status, created_at, updated_at 
FROM customer_support
`

func (q *Queries) GetCustomerSupportCaseList(ctx context.Context) ([]CustomerSupport, error) {
	rows, err := q.db.Query(ctx, getCustomerSupportCaseList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerSupport{}
	for rows.Next() {
		var i CustomerSupport
		if err := rows.Scan(
			&i.CsID,
			&i.UserID,
			&i.OrderID,
			&i.Subject,
			&i.Message,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomerSupportCaseStatus = `-- name: UpdateCustomerSupportCaseStatus :one
UPDATE customer_support 
SET 
    STATUS = COALESCE($2,Status),
    MESSAGE = COALESCE($3,Message),
    UPDATED_AT = NOW()
WHERE 
    CS_ID = $1 RETURNING cs_id, user_id, order_id, subject, message, status, created_at, updated_at
`

type UpdateCustomerSupportCaseStatusParams struct {
	CsID    uuid.UUID   `json:"cs_id"`
	Status  string      `json:"status"`
	Message pgtype.Text `json:"message"`
}

func (q *Queries) UpdateCustomerSupportCaseStatus(ctx context.Context, arg UpdateCustomerSupportCaseStatusParams) (CustomerSupport, error) {
	row := q.db.QueryRow(ctx, updateCustomerSupportCaseStatus, arg.CsID, arg.Status, arg.Message)
	var i CustomerSupport
	err := row.Scan(
		&i.CsID,
		&i.UserID,
		&i.OrderID,
		&i.Subject,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
